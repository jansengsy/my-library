{"version":3,"file":"undefined.min.js","sources":["../src/utils/utils.js","../src/snail/snail.js","../src/area/area.js","../src/donut/donut.js","../src/line/line.js","../src/pie/pie.js","../src/scatter/scatter.js","../src/summarytable/summarytable.js"],"sourcesContent":["// Global constants\r\nexport let globalChartData = {};\r\n\r\nexport function addToGlobalCharts(data, uid) {\r\n    globalChartData[uid] = data;\r\n}\r\n\r\nexport function getFromGlobalChartsData(uid) {\r\n    return globalChartData[uid];\r\n}\r\n\r\nexport function clearChartDrawArea(id) {\r\n    const container = d3.select(`#container_${id}`);\r\n    container.selectAll(`.legend_${id}`).remove();\r\n    container.selectAll(\".chart_svg\").remove();\r\n}\r\n\r\n// Example data: type = \"area\", width = 100, height = 100, margin = { top: 5, bottom: 5, left: 5, right: 5 }, uid = D7g9dbbshs70f0D899, colours = [\"#ff0000\", \"#ab12ff\", \"#0fa2f4\"]\r\nexport function drawLegend(type, width, height, margin, uid, labels, colours) {\r\n\r\n    const legendIconSize = 10;\r\n    const rowHeight = 15;\r\n    const legendMargin = 10;\r\n    const legendWidth = width + margin.left + margin.right - legendMargin * 2;\r\n    let legendItemsArray = [];\r\n    let legendRowCurrentWidth = 0;\r\n    let legendCurrentRow = 0;\r\n    let legendRows = 0;\r\n\r\n    labels.forEach((item, i) => {\r\n\r\n        const itemWidth = legendIconSize + getStringLengthInPixels(item) + 20; // 20 represents the gap between items\r\n        item = item.replaceAll(\" \", \"_\");\r\n\r\n        // If the legend item would fit into the width we're happy\r\n        if (legendWidth > legendRowCurrentWidth + itemWidth) {\r\n            legendItemsArray[i] = {item, legendCurrentRow, itemWidth, legendRowCurrentWidth};\r\n            legendRowCurrentWidth += itemWidth;\r\n        } else { // If it would overflow we start a new legend row\r\n            legendCurrentRow += 1;\r\n            legendRows += 1;\r\n            legendRowCurrentWidth = 0;\r\n            legendItemsArray[i] = {item, legendCurrentRow, itemWidth, legendRowCurrentWidth};\r\n            legendRowCurrentWidth = itemWidth;\r\n        }\r\n    });\r\n\r\n    const legendContainer = d3.select(`#chart_${uid}`)\r\n        .append(\"g\")\r\n        .attr(\"class\", `legend_${uid}`)\r\n        .attr(\"transform\", `translate(0, ${height + margin.top + margin.bottom - 60})`) // 60 represents the minimum legend height\r\n\r\n    const legendItems = legendContainer.selectAll(\".legend-item\")\r\n        .data(legendItemsArray)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"legend-item\")\r\n        .attr(\"transform\", d => `translate(${legendMargin + d.legendRowCurrentWidth}, ${rowHeight * d.legendCurrentRow})`)\r\n        .on(\"mouseenter\", e => handleLegendIn(type, d3.event, uid))\r\n        .on(\"mouseout\", e => handleLegendOut(type, d3.event, uid));\r\n\r\n    legendItems.append(\"rect\")\r\n        .attr(\"width\", legendIconSize)\r\n        .attr(\"height\", legendIconSize)\r\n        .attr(\"fill\", (d, i) => `${colours[i]}`)\r\n        .attr(\"transform\", (d, i) => {\r\n            `translate(${d.legendRowCurrentWidth}, ${legendIconSize / 2})`\r\n        });\r\n\r\n    legendItems.append(\"text\")\r\n        .attr(\"x\", legendIconSize + 5) // Adjust the x-position of the text factoring the icon and a gap between\r\n        .attr(\"y\", 9) // Adjust the y-position of the text to center vertically\r\n        .style(\"font-size\", \"14px\")\r\n        .style(\"font-family\", \"Calibri\")\r\n        .attr(\"transform\", (d, i) => {\r\n            `translate(${d.legendRowCurrentWidth}, 0)`\r\n        })\r\n\t\t.text(d => d.item.replaceAll(\"_\", \" \"));\r\n}\r\n\r\nexport function handleLegendIn(type, e, uid) {\r\n    if (type === \"area\") {\r\n        d3.select(`#chart_${uid}`).selectAll(`.${e.target.__data__.item}`).attr(\"fill\", \"yellow\");\r\n    } else if (type === \"snail\") {\r\n        const portfolioClass = e.target.__data__.item.replaceAll(\" \", \"_\").replaceAll(\"/\", \"-\").replaceAll(\".\", \"\");\r\n        d3.select(`#chart_${uid}`).selectAll(`.${portfolioClass}`).attr(\"stroke-width\", 4);\r\n        d3.select(`#chart_${uid}`).selectAll(`circle.${portfolioClass}`).attr(\"r\", 7);\r\n    }\r\n}\r\n\r\nexport function handleLegendOut(type, e, uid) {\r\n    if (type === \"area\") {\r\n        const asset = e.target.__data__;\r\n        d3.select(`#chart_${uid}`).selectAll(`.${asset.item}`).attr(\"fill\", `#${globalChartData[uid].Colours[asset.item.replaceAll(\"_\", \" \")]}`);\r\n    } else if (type === \"snail\") {\r\n        const portfolioClass = e.target.__data__.item.replaceAll(\" \", \"_\").replaceAll(\"/\", \"-\").replaceAll(\".\", \"\");\r\n        d3.select(`#chart_${uid}`).selectAll(`.${portfolioClass}`).attr(\"stroke-width\", 2);\r\n        d3.select(`#chart_${uid}`).selectAll(`circle.${portfolioClass}`).attr(\"r\", 5);\r\n    }\r\n}\r\n\r\nexport function getStringLengthInPixels(string) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    // Set font properties for measuring the string width\r\n    const font = \"Calibri\";\r\n    const fontSize = \"14px\";\r\n    context.font = `${fontSize} ${font}`;\r\n\r\n    // Get the width of the string in pixels\r\n    const stringWidth = context.measureText(string).width;\r\n\r\n    canvas.remove();\r\n\r\n    return stringWidth;\r\n}\r\n","import { clearChartDrawArea, drawLegend, handleLegendIn, handleLegendOut, getStringLengthInPixels, addToGlobalCharts, getFromGlobalChartsData } from \"../utils\";\r\n\r\n// Eventually, this will be passed in as data, but for now these are hardcoded\r\nconst snailColours = [\"#ff0000\", \"#a04476\", \"#936eb1\", \"#5090cd\", \"#00a489\", \"#ff8000\", \"#28427b\"];\r\n\r\n// Tooltip DOM elements\r\nlet snailTooltip;\r\n\r\nexport function createRealTimeSnailChart(data) {\r\n    return \"snail\";\r\n}\r\n\r\nexport function snail(data) {\r\n\r\n    let uid;\r\n    let snailWidth;\r\n    let snailHeight;\r\n    let snailLegendHeight;\r\n    let snailMargin = { top: 5, right: 15, bottom: 35, left: 45, };\r\n    let snailgroupedLines = [];\r\n\r\n    uid = data.Name.replace(\"chart_\", \"\");\r\n    addToGlobalCharts(c, uid)\r\n\r\n    clearChartDrawArea(uid);\r\n\r\n    // Ensure chart data exists\r\n    if (data.RawValues.Default.length < 1) {\r\n        showChartNoData(data);\r\n        return;\r\n    }\r\n    \r\n    const legendData = data.Labels.Default;\r\n\r\n    // Data values\r\n    snailgroupedLines = []; // Resetting each time we redraw otherwise we just keep adding to it\r\n    let currentSubArray = [];\r\n\r\n    // Set the dimensions and margins of the chart\r\n    snailWidth = d3.select(`#${data.Name}`).node().getBoundingClientRect().width - snailMargin.left - snailMargin.right;\r\n    snailHeight = d3.select(`#${data.Name}`).node().getBoundingClientRect().height - snailMargin.left - snailMargin.right;\r\n    snailLegendHeight = 25;\r\n\r\n    drawLegend(\"snail\", snailWidth, snailHeight, snailMargin, uid, data.Labels.Default, snailColours);\r\n\r\n    // Group the lines for each snail\r\n    data.RawValues.Default.forEach(item => {\r\n        if (item[1] === 1) {\r\n            currentSubArray = [item];\r\n            snailgroupedLines.push(currentSubArray);\r\n        } else {\r\n            currentSubArray.push(item);\r\n        }\r\n    });\r\n\r\n    // Add the asset name to the lines\r\n    legendData.forEach((asset, i) => {\r\n        snailgroupedLines[i].forEach(line => {\r\n            line[0] = legendData[i];\r\n        });\r\n    });\r\n\r\n    const c = snailgroupedLines.length;\r\n    const benchmarkLine = [[...snailgroupedLines[c - 2][0]], [...snailgroupedLines[c - 1][0]]];\r\n\r\n    // Calculate the slope and intercept of the line\r\n    const startX = benchmarkLine[0][2];\r\n    const startY = benchmarkLine[0][3];\r\n    const endX = benchmarkLine[1][2];\r\n    const endY = benchmarkLine[1][3];\r\n    const slope = (endY - startY) / (endX - startX);\r\n    const intercept = startY - slope * startX;\r\n\r\n    // Calculate the extended line coordinates\r\n    let extendedX1 = 0;\r\n    let extendedY1 = slope * extendedX1 + intercept;\r\n    let extendedX2 = d3.max(snailgroupedLines.flat().map(d => d[d.length - 2]));\r\n    let extendedY2 = slope * extendedX2 + intercept;\r\n\r\n    // Update the benchmark line to use these extended coordinates\r\n    benchmarkLine[0][2] = extendedX1;\r\n    benchmarkLine[0][3] = extendedY1;\r\n    benchmarkLine[1][2] = extendedX2;\r\n    benchmarkLine[1][3] = extendedY2;\r\n\r\n    const xPoints = snailgroupedLines.flat().map(d => d[d.length - 2]);\r\n    const yPoints = snailgroupedLines.flat().map(d => d[d.length - 1]);\r\n    yPoints.push(extendedY2);\r\n\r\n    // Append the SVG element to the body\r\n    const svg = d3.select(`#${data.Name}`)\r\n        .attr(\"width\", `${snailWidth + snailMargin.left + snailMargin.right}`)\r\n        .attr(\"height\", `${snailHeight + snailMargin.top + snailMargin.bottom}`)\r\n        .append(\"g\")\r\n        .attr(\"class\", \"chart_svg\")\r\n        .attr(\"transform\", `translate(${snailMargin.left}, ${snailMargin.top})`);\r\n\r\n    // Set up the scales\r\n    const xScale = d3.scaleLinear()\r\n        .domain([\r\n            d3.min(xPoints),\r\n            d3.max(xPoints),\r\n        ])\r\n        .range([0, snailWidth]);\r\n\r\n    const yScale = d3.scaleLinear()\r\n        .domain([\r\n            d3.min(yPoints),\r\n            d3.max(yPoints),\r\n        ])\r\n        .nice()\r\n        .range([snailHeight - snailMargin.bottom - snailLegendHeight, 0]);\r\n\r\n    // Create the X axis\r\n    const xAxis = d3.axisBottom(xScale);\r\n    xAxis.tickFormat(d3.format(\".1f\"));\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"class\", \"x-axis\")\r\n        .style(\"color\", \"black\")\r\n        .style(\"font-size\", \"10px\")\r\n        .attr(\"transform\", `translate(0, ${snailHeight - snailLegendHeight - snailMargin.bottom})`)\r\n        .call(xAxis);\r\n\r\n    // Create the Y axis\r\n    const yAxis = d3.axisLeft(yScale);\r\n    yAxis.tickFormat(d3.format(\".2f\"));\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"class\", \"y-axis\")\r\n        .style(\"color\", \"black\")\r\n        .style(\"font-size\", \"10px\")\r\n        .call(yAxis);\r\n\r\n    d3.select(\"g#yAxisG\").select(\"path\").remove();\r\n\r\n    // Create the background grid\r\n    svg.selectAll(\"xGrid\")\r\n        .data(xScale.ticks().slice(0))\r\n        .join(\"line\")\r\n        .attr(\"x1\", d => xScale(d))\r\n        .attr(\"x2\", d => xScale(d))\r\n        .attr(\"y1\", 0)\r\n        .attr(\"y2\", snailHeight - snailLegendHeight - snailMargin.bottom)\r\n        .attr(\"stroke\", \"#e0e0e0\")\r\n        .attr(\"stroke-width\", .5);\r\n\r\n    svg.selectAll(\"yGrid\")\r\n        .data(yScale.ticks().slice(0))\r\n        .join(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"x2\", snailWidth)\r\n        .attr(\"y1\", d => yScale(d))\r\n        .attr(\"y2\", d => yScale(d))\r\n        .attr(\"stroke\", \"#e0e0e0\")\r\n        .attr(\"stroke-width\", .5)\r\n\r\n    // Line generator used to draw any lines\r\n    const lineGenerator = d3.line()\r\n        .x(d => xScale(d[2]))\r\n        .y(d => yScale(d[3]));\r\n\r\n    // Draw benchmark line\r\n    svg.append(\"path\")\r\n        .datum(benchmarkLine)\r\n        .attr(\"d\", lineGenerator)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"green\")\r\n        .attr(\"stroke-width\", 2);\r\n\r\n    // This loop is where the lines and dots for each value are drawn\r\n    snailgroupedLines.forEach((line, i) => {\r\n\r\n        // Having a class with spaces or slashes in makes it harder to work with later\r\n        const portfolioName = line[0][0].replaceAll(\" \", \"_\").replaceAll(\"/\", \"-\").replaceAll(\".\", \"\");\r\n\r\n        svg.append(\"path\")\r\n            .datum(line)\r\n            .attr(\"d\", lineGenerator)\r\n            .attr(\"class\", \"trail\")\r\n            .attr(\"class\", portfolioName)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", `${snailColours[i]}`)\r\n            .attr(\"opacity\", 1)\r\n            .attr(\"stroke-width\", 2);\r\n\r\n        svg.append(\"circle\")\r\n            .attr(\"class\", \"dot\")\r\n            .attr(\"class\", portfolioName)\r\n            .attr(\"cx\", xScale(line[0][2])) // Final point for each line\r\n            .attr(\"cy\", yScale(line[0][3]))\r\n            .attr(\"r\", 5)\r\n            .attr(\"fill\", `${snailColours[i]}`);\r\n    });\r\n\r\n    // All of the paths are given the class \"area\"\r\n    svg.selectAll(`circle`).on(\"mouseover\", (e, d) => {\r\n        showSnailTooltip(d3.event, d, uid)\r\n    }).on(\"mouseout\", () => hideSnailTooltip());\r\n\r\n    // Tooltip methods\r\n    function showSnailTooltip(e, index, uid) {\r\n\r\n        snailTooltip = d3.select(`#tooltip_${uid}`);\r\n        data = snailgroupedLines[index][0];\r\n    \r\n        let tooltipX;\r\n    \r\n        if (d3.pointer(e)[0] > snailWidth / 2) {\r\n            tooltipX = d3.pointer(e)[0] - 150;\r\n        } else {\r\n            tooltipX = d3.pointer(e)[0] + snailMargin.left + snailMargin.right;\r\n        }\r\n    \r\n        snailTooltip.style(\"left\", tooltipX + \"px\")\r\n            .style(\"top\", d3.pointer(e)[1] + snailLegendHeight + \"px\");\r\n    \r\n        snailTooltip.style(\"display\", \"block\");\r\n        snailTooltip.style(\"color\", \"black\");\r\n    \r\n        const textData = [\r\n            `Portfolio: ${data[0]}`,\r\n            `Risk relative to benchmark: ${data[2].toFixed(2)}`,\r\n            `Return % per month: ${data[3].toFixed(2)}%`,\r\n        ];\r\n    \r\n        // For each item in data array, add a line break after\r\n        snailTooltip.html(textData.join(\"<br>\"));\r\n    }\r\n    \r\n    function hideSnailTooltip() {\r\n        snailTooltip.style(\"display\", \"none\");\r\n        snailTooltip.text(\"\");\r\n    }\r\n}\r\n\r\nexport function realTimeSnailChartOnResize(data) {\r\n    updateRealTimeSnailChart(globalChartData[data.uid.replace(\"chart_\", \"\")]);\r\n}\r\n\r\nexport function handleSnailLegendIn(e, uid) {\r\n    const portfolioClass = e.item.replaceAll(\" \", \"_\").replaceAll(\"/\", \"-\").replaceAll(\".\", \"\");\r\n    d3.select(`#chart_${uid}`).selectAll(`.${portfolioClass}`).attr(\"stroke-width\", 4);\r\n    d3.select(`#chart_${uid}`).selectAll(`circle.${portfolioClass}`).attr(\"r\", 7);\r\n}\r\n\r\nexport function handleSnailLegendOut(e, uid) {\r\n    const portfolioClass = e.item.replaceAll(\" \", \"_\").replaceAll(\"/\", \"-\").replaceAll(\".\", \"\");\r\n    d3.select(`#chart_${uid}`).selectAll(`.${portfolioClass}`).attr(\"stroke-width\", 2);\r\n    d3.select(`#chart_${uid}`).selectAll(`circle.${portfolioClass}`).attr(\"r\", 5);\r\n}","import { clearChartDrawArea, drawLegend, handleLegendIn, handleLegendOut, getStringLengthInPixels, addToGlobalCharts, getFromGlobalChartsData } from \"../utils\";\r\n\r\n// Initial creation (this is a step for the C3 pipeline but, for now, D3 charts need this)\r\nexport function createRealTimeAreaChart(data) {\r\n    return \"area\";\r\n}\r\n\r\nexport function area(c) {\r\n\r\n    // Tooltip DOM elements\r\n    let areaTooltip;\r\n    let areaTooltipLineX;\r\n    let areaTooltipLineY;\r\n    let areaWidth;\r\n    let areaHeight;\r\n    let legendHeight;\r\n    let areaMargin = { top: 5, right: 15, bottom: 45, left: 45, };\r\n\r\n    let uid;\r\n\r\n    uid = c.Name.replace(\"chart_\", \"\");\r\n    addToGlobalCharts(c, uid)\r\n\r\n    const colours = Object.values(c.Colours).map(value => '#' + value);\r\n    \r\n    clearChartDrawArea(uid);\r\n\r\n    // Ensure chart data exists\r\n    if (c.RawValues.Default.length < 1) {\r\n        showChartNoData(c);\r\n        return;\r\n    }\r\n\r\n    const legendData = c.Labels.Default.map((value) => value.replaceAll(\" \", \"_\"));\r\n    \r\n    // Data values\r\n    let data = c.RawValues.Default;\r\n    const assetCount = legendData.length;\r\n    const time = [];\r\n    \r\n    // SVG Size values:\r\n    areaWidth = d3.select(`#${c.Name}`).node().getBoundingClientRect().width - areaMargin.left - areaMargin.right;\r\n    areaHeight = d3.select(`#${c.Name}`).node().getBoundingClientRect().height - areaMargin.top - areaMargin.bottom;\r\n    legendHeight = 25;\r\n\r\n    drawLegend(\"area\", areaWidth, areaHeight, areaMargin, uid, c.Labels.Default, colours);\r\n\r\n    /*\r\n        Data arrives like this: \r\n            [UTC Timestamp, percentage a, percentage b, percentage c]\r\n\r\n        Data leaves like this: \r\n            [ [UTC Timestamp, percentage a], [UTC Timestamp, percentage b], [UTC Timestamp, percentage c] ]\r\n    */\r\n    data = data.flatMap(subArray => {\r\n        const firstValue = subArray[0];\r\n        const remainingValues = subArray.slice(1);\r\n        return remainingValues.map(value => [firstValue, value]);\r\n    });\r\n\r\n    // For each datum in data, I add additional information so that it is acessible for tooltips\r\n    data.forEach((d, i) => {\r\n        d.assetType = legendData[i % assetCount];\r\n        d.date = new Date(d[0] * 1000).toLocaleDateString();\r\n        d.percentage = i % assetCount > 0 ? Math.abs(d[1] - data[i - 1][1]) : d[1];\r\n        d.startingPercentage = i > 0 ? data[i - 1][1] : null;\r\n    });\r\n\r\n    // Create an array of dates, converted from UTC to JS Date format.\r\n    data.forEach((d, i) => {\r\n        d[0] = d[0] * 1000;\r\n        let date = new Date(d[0]);\r\n        time.push(date);\r\n    });\r\n\r\n    // Create the SVG\r\n    const svg = d3.select(`#${c.Name}`)\r\n        .append(\"g\")\r\n        .attr(\"width\", `${areaWidth + areaMargin.left + areaMargin.right}`)\r\n        .attr(\"height\", `${areaHeight + areaMargin.top + areaMargin.bottom}`)\r\n        .attr(\"class\", \"chart_svg\")\r\n        .attr(\"transform\", `translate(${areaMargin.left}, ${areaMargin.top})`);\r\n\r\n    // Set up the scales\r\n    var xScale = d3.scaleTime()\r\n        .domain(d3.extent(time))\r\n        .range([0, areaWidth]);\r\n\r\n    const yScale = d3.scaleLinear()\r\n        .domain([100, 0])\r\n        .nice()\r\n        .range([0, areaHeight - areaMargin.bottom - legendHeight]);\r\n\r\n    // Area generator\r\n    const area = d3.area()\r\n        .x(d => xScale(d[0]))\r\n        // I have already calculated the starting percentage to make it easier\r\n        .y0(d => d.assetType === legendData[0] ? areaHeight - areaMargin.bottom - legendHeight : yScale(d.startingPercentage))\r\n        .y1(d => yScale(d[1]));\r\n\r\n    // Draw the areas\r\n    for (let step = 0; step < data.length - assetCount; step++) {\r\n        svg.append(\"path\")\r\n            .datum([data[step], data[step + assetCount]])\r\n            .attr(\"d\", area)\r\n            .attr(\"id\", \"area\")\r\n            .attr(\"class\", `area ${legendData[step % assetCount]}`)\r\n            .attr(\"fill\", `#${c.Colours[legendData[step % assetCount].replaceAll(\"_\", \" \")]}`);\r\n    }\r\n\r\n    // Create the X axis\r\n    var xAxis = d3.axisBottom(xScale);\r\n    xAxis.tickFormat(d3.timeFormat('%b %y'));\r\n\r\n    svg.append('g')\r\n        .attr(\"class\", \"x-axis\")\r\n        .style(\"color\", \"black\")\r\n        .style(\"font-size\", \"10px\")\r\n        .attr('transform', `translate(0, ${areaHeight - areaMargin.bottom - legendHeight})`)\r\n        .call(xAxis)\r\n        .selectAll(\"text\")\r\n        .attr(\"transform\", \"rotate(45)\")\r\n        .style(\"text-anchor\", \"start\");\r\n\r\n    // Create the Y axis\r\n    const yAxis = d3.axisLeft(yScale);\r\n    yAxis.tickFormat(d3.format(\".1f\"));\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"class\", \"y-axis\")\r\n        .style(\"color\", \"black\")\r\n        .style(\"font-size\", \"10px\")\r\n        .call(yAxis);\r\n\r\n    // Adding the event listeners to the drawn areas\r\n    d3.selectAll(`#chart_${uid}`)\r\n        .on(\"mousemove\", e => {\r\n            // Draw tooltip\r\n            if (d3.event.target.id === \"area\") showAreaTooltip(d3.event);\r\n            // Delete tooltip if mouse has left chart area\r\n            else if (d3.event.target.id !== \"tooltip-line\") hideAreaTooltip();\r\n        });\r\n    \r\n    areaTooltip = d3.select(`#tooltip_${uid}`);\r\n    areaTooltipLineX = d3.select(`#chart_${uid}`).append(\"line\").attr(\"id\", \"tooltip-line\").attr(\"stroke\", \"red\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"2,2\");\r\n    areaTooltipLineY = d3.select(`#chart_${uid}`).append(\"line\").attr(\"id\", \"tooltip-line\").attr(\"stroke\", \"red\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"2,2\");\r\n\r\n    // Tooltip code\r\n    function showAreaTooltip(e) {\r\n\r\n        // Set the position of the tooltip lines\r\n        areaTooltipLineY.style(\"display\", \"block\").attr(\"x1\", d3.pointer(e)[0]).attr(\"x2\", d3.pointer(e)[0]).attr(\"y1\", 0 + areaMargin.top).attr(\"y2\", areaHeight - areaMargin.bottom + areaMargin.top - legendHeight);\r\n        areaTooltipLineX.style(\"display\", \"block\").attr(\"y1\", d3.pointer(e)[1]).attr(\"y2\", d3.pointer(e)[1]).attr(\"x1\", 0 + areaMargin.left).attr(\"x2\", areaWidth + areaMargin.left);\r\n    \r\n        const pointData = e.target.__data__[0];\r\n        let tooltipX;\r\n        let tooltipY;\r\n    \r\n        // If we're on the right side of the chart, draw the tooltip toward the left\r\n        if(d3.pointer(e)[0] > areaWidth / 2) {\r\n            tooltipX = d3.pointer(e)[0] - 120;\r\n            tooltipY = d3.pointer(e)[1] + areaMargin.bottom + 15;\r\n        } else {\r\n            tooltipX = d3.pointer(e)[0] + areaMargin.left - areaMargin.right;\r\n            tooltipY = d3.pointer(e)[1] + areaMargin.bottom + 15;\r\n        }\r\n    \r\n        areaTooltip.style(\"left\", tooltipX + \"px\")\r\n            .style(\"top\", tooltipY + \"px\");\r\n    \r\n        areaTooltip.style(\"display\", \"block\");\r\n        areaTooltip.style(\"color\", \"black\");\r\n    \r\n        const textData = [\r\n            `<b>Asset:</b> ${pointData.assetType.replaceAll(\"_\", \" \")}`,\r\n            `<b>Percentage:</b> ${Number(pointData.percentage).toFixed(1)}%`,\r\n            `<b>Date:</b> ${pointData.date}`,\r\n        ];\r\n    \r\n        // For each item in data array, add a line break after\r\n        areaTooltip.html(textData.join(\"<br>\"));\r\n    }\r\n    \r\n    function hideAreaTooltip() {\r\n        areaTooltip.style(\"display\", \"none\");\r\n        areaTooltip.text(\"\");\r\n        areaTooltipLineX.style(\"display\", \"none\");\r\n        areaTooltipLineY.style(\"display\", \"none\");\r\n    }\r\n}\r\n\r\n// Unused argument as at the moment this method is shared with c3 charts (which do require this value - will remove later)\r\nexport function realTimeAreaChartOnResize(data) {\r\n    updateRealTimeAreaChart(globalChartData[data.uid.replace(\"chart_\", \"\")]);\r\n}\r\n\r\nexport function highlightAsset(asset, uid) {\r\n    d3.select(`#chart_${uid}`).selectAll(`.${asset.item}`).attr(\"fill\", \"yellow\");\r\n}\r\n\r\nexport function unhighlightAsset(asset, uid) {\r\n    d3.select(`#chart_${uid}`).selectAll(`.${asset.item}`).attr(\"fill\", `#${globalChartData[uid].Colours[asset.item.replaceAll(\"_\", \" \")]}`);\r\n}\r\n","export function createRealTimeDonutChart(data) {\r\n    if (data.ChartName && data.ChartTypeString && data.UID) {\r\n        return c3.generate({\r\n            bindto: '#' + data.UID,\r\n            data: {\r\n                xs: {\r\n                },\r\n                columns: [\r\n                ],\r\n                type: data.ChartTypeString,\r\n                labels: true,\r\n                xSort: false,\r\n                order: null\r\n            },\r\n            interaction: {\r\n                enabled: !data.SuppressUpdate\r\n            },\r\n            point: {\r\n                show: true,\r\n                r: 4\r\n            },\r\n            zoom: {\r\n                enabled: true,\r\n            },\r\n            axis: null,\r\n            donut: {\r\n                width: 70,\r\n                expand: !data.SuppressUpdate ? 350 : 0\r\n            },\r\n            transition: {\r\n                duration: !data.SuppressUpdate ? 250 : 0\r\n            },\r\n            tooltip: {\r\n                show: !data.SuppressUpdate,\r\n                contents: function (d) {\r\n                    var $$ = this;\r\n                    return createRealtimeToolTip(d, $$, data)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function updateRealTimeDonutChart(data) {\r\n    if (data.Name in realtimecharts) {\r\n        let chart = realtimecharts[data.Name].chart;\r\n        let supressUpdate = realtimecharts[data.Name].suppressupdate;\r\n        let columnValues = [];\r\n\r\n        if (typeof data.Colours !== 'undefined' && data.Colours) {\r\n            $.each(data.Colours, function (k, v) {\r\n                if (data.Colours[k]) {\r\n                    realtimecharts[data.Name].colours[k] = \"#\" + data.Colours[k];\r\n                }\r\n            });\r\n        }\r\n\r\n        let displayChart = false;\r\n\r\n        $.each(data.XValues, function (k, v) {\r\n            $.each(v, function (xk, xv) {\r\n                if (!displayChart && $.isNumeric(xv) && parseFloat(xv) > 0) {\r\n                    displayChart = true;\r\n                }\r\n\r\n                columnValues.push([data.Labels[k][xk], parseFloat(xv)]);\r\n                realtimecharts[data.Name].labels[data.Labels[k][xk]] = data.Labels[k][xk];\r\n            });\r\n        });\r\n\r\n        if (displayChart) {\r\n            chart.load({\r\n                columns: columnValues,\r\n                colors: realtimecharts[data.Name].colours,\r\n                done: function () {\r\n                    setChartAsLoaded(data.Name);\r\n                }\r\n            });\r\n\r\n            hideChartNoData(realtimecharts[data.Name]);\r\n        } else {\r\n            showChartNoData(realtimecharts[data.Name]);\r\n        }\r\n\r\n        hideChartSpinner(realtimecharts[data.Name]);\r\n\r\n        setTimeout(function () {\r\n            resizeRealTimeChart(realtimecharts[data.Name], false);\r\n        }, !supressUpdate ? 350 : 0);\r\n    }\r\n}","export function createRealTimeLineChart(data) {\r\n\t\r\n\tif (data.ChartName && data.ChartTypeString && data.UID) {\r\n\t\treturn c3.generate({\r\n\t\t\tbindto: '#' + data.UID,\r\n\t\t\tdata: {\r\n\t\t\t\txs: {\r\n\t\t\t\t},\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t],\r\n\t\t\t\ttype: data.ChartTypeString,\r\n\t\t\t\tlabels: false,\r\n\t\t\t\txSort: false,\r\n\t\t\t\torder: null\r\n\t\t\t},\r\n\t\t\tinteraction: {\r\n\t\t\t\tenabled: !data.SuppressUpdate\r\n\t\t\t},\r\n\t\t\tpoint: {\r\n\t\t\t\tshow: false,\r\n\t\t\t\tr: 4\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t\taxis: data.Axis,\r\n\t\t\ttransition: {\r\n\t\t\t\tduration: !data.SuppressUpdate ? 250 : 0\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tshow: !data.SuppressUpdate,\r\n\t\t\t\tcontents: function (d) {\r\n\t\t\t\t\tvar $$ = this;\r\n\t\t\t\t\treturn createRealtimeToolTip(d, $$, data)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\nexport function updateRealTimeLineChart(data) {\r\n\r\n\tif (data.Name in realtimecharts) {\r\n\t\tvar chart = realtimecharts[data.Name].chart;\r\n\t\tvar supressUpdate = realtimecharts[data.Name].suppressupdate;\r\n\t\tvar columnValues = [];\r\n\t\tvar activeKeys = 0;\r\n\r\n\t\tif (typeof data.Colours !== 'undefined' && data.Colours) {\r\n\t\t\t$.each(data.Colours, function (k, v) {\r\n\t\t\t\tif (data.Colours[k]) {\r\n\t\t\t\t\trealtimecharts[data.Name].colours[k] = \"#\" + data.Colours[k];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar columnMap = {};\r\n\r\n\t\tvar maxDate = null;\r\n\t\tvar minDate = null;\r\n\t\tvar isDateXAxis = chart.internal.config.axis_x_type == \"time\" || chart.internal.config.axis_x_type == \"timeseries\";\r\n\t\t//var isDateYAxis = chart.internal.config.axis_y_type == \"time\" || chart.internal.config.axis_y_type == \"timeseries\";\r\n\r\n\t\t$.each(data.XValues, function (k, v) {\r\n\t\t\tvar iteration = 0;\r\n\r\n\t\t\tvar xValues = [];\r\n\t\t\tvar yValues = [];\r\n\r\n\t\t\txValues.push(k + \"_x\");\r\n\t\t\tyValues.push(k);\r\n\r\n\t\t\t$.each(v, function (xk, xv) {\r\n\t\t\t\tif ((xv.indexOf(\"-\") >= 0)) {\r\n\t\t\t\t\tvar dateObj = Date.parse(xv);\r\n\t\t\t\t\txValues.push(dateObj);\r\n\r\n\t\t\t\t\tif (isDateXAxis) {\r\n\t\t\t\t\t\tdateObj = moment(dateObj);\r\n\r\n\t\t\t\t\t\tif (minDate == null || dateObj < minDate) {\r\n\t\t\t\t\t\t\tminDate = dateObj;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (maxDate == null || dateObj > maxDate) {\r\n\t\t\t\t\t\t\tmaxDate = dateObj;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\txValues.push(parseFloat(xv));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tyValues.push(data.YValues[k][iteration]);\r\n\r\n\t\t\t\titeration++;\r\n\t\t\t});\r\n\r\n\t\t\tcolumnValues.push(xValues);\r\n\t\t\tcolumnValues.push(yValues);\r\n\r\n\t\t\tcolumnMap[k] = k + \"_x\";\r\n\r\n\t\t\trealtimecharts[data.Name].labels[k] = data.Labels[k];\r\n\t\t});\r\n\r\n\t\tchart.load({\r\n\t\t\txs: columnMap,\r\n\t\t\tcolumns: columnValues,\r\n\t\t\tcolors: realtimecharts[data.Name].colours,\r\n\t\t\tdone: function () {\r\n\t\t\t\tsetChartAsLoaded(data.Name);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (minDate != null && maxDate != null) {\r\n\t\t\trealtimecharts[data.Name].startdate = minDate;\r\n\t\t\trealtimecharts[data.Name].enddate = maxDate;\r\n\t\t}\r\n\r\n\t\tif (Object.keys(columnMap).length > 1) {\r\n\t\t\tchart.legend.show();\r\n\t\t} else {\r\n\t\t\tchart.legend.hide();\r\n\t\t}\r\n\r\n\t\t$.each(chart.xs(), function (k, v) {\r\n\t\t\tif (k in data.XValues) {\r\n\t\t\t\tactiveKeys++;\r\n\t\t\t} else {\r\n\t\t\t\tchart.unload({\r\n\t\t\t\t\tids: k\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (activeKeys == 0) {\r\n\t\t\tshowChartNoData(realtimecharts[data.Name]);\r\n\t\t} else {\r\n\t\t\thideChartNoData(realtimecharts[data.Name]);\r\n\t\t}\r\n\r\n\t\thideChartSpinner(realtimecharts[data.Name]);\r\n\r\n\t\tsetTimeout(function () {\r\n\t\t\tresizeRealTimeChart(realtimecharts[data.Name], false);\r\n\t\t}, !supressUpdate ? 350 : 0);\r\n\t}\r\n}","export function createRealTimePieChart(data) {\r\n\tif (data.ChartName && data.ChartTypeString && data.UID) {\r\n\t\treturn c3.generate({\r\n\t\t\tbindto: '#' + data.UID,\r\n\t\t\tdata: {\r\n\t\t\t\txs: {\r\n\t\t\t\t},\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t],\r\n\t\t\t\ttype: data.ChartTypeString,\r\n\t\t\t\tlabels: true,\r\n\t\t\t\txSort: false,\r\n\t\t\t\torder: null\r\n\t\t\t},\r\n\t\t\tinteraction: {\r\n\t\t\t\tenabled: !data.SuppressUpdate\r\n\t\t\t},\r\n\t\t\tpoint: {\r\n\t\t\t\tshow: true,\r\n\t\t\t\tr: 4\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t\tdonut: {\r\n\t\t\t\twidth: 70,\r\n\t\t\t\texpand: !data.SuppressUpdate ? 350 : 0\r\n\t\t\t},\r\n\t\t\ttransition: {\r\n\t\t\t\tduration: !data.SuppressUpdate ? 250 : 0\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tshow: !data.SuppressUpdate,\r\n\t\t\t\tcontents: function (d) {\r\n\t\t\t\t\tvar $$ = this;\r\n\t\t\t\t\treturn createRealtimeToolTip(d, $$, data)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\nexport function updateRealTimePieChart(data) {\r\n\tif (data.Name in realtimecharts) {\r\n\t\tlet chart = realtimecharts[data.Name].chart;\r\n\t\tlet supressUpdate = realtimecharts[data.Name].suppressupdate;\r\n\t\tlet columnValues = [];\r\n\r\n\t\tif (typeof data.Colours !== 'undefined' && data.Colours) {\r\n\t\t\t$.each(data.Colours, function (k, v) {\r\n\t\t\t\tif (data.Colours[k]) {\r\n\t\t\t\t\trealtimecharts[data.Name].colours[k] = \"#\" + data.Colours[k];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet displayChart = false;\r\n\r\n\t\t$.each(data.XValues, function (k, v) {\r\n\t\t\t$.each(v, function (xk, xv) {\r\n\t\t\t\tif (!displayChart && $.isNumeric(xv) && parseFloat(xv) > 0) {\r\n\t\t\t\t\tdisplayChart = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolumnValues.push([data.Labels[k][xk], parseFloat(xv)]);\r\n\t\t\t\trealtimecharts[data.Name].labels[data.Labels[k][xk]] = data.Labels[k][xk];\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tif (displayChart) {\r\n\t\t\tchart.load({\r\n\t\t\t\tcolumns: columnValues,\r\n\t\t\t\tcolors: realtimecharts[data.Name].colours,\r\n\t\t\t\tdone: function () {\r\n\t\t\t\t\tsetChartAsLoaded(data.Name);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\thideChartNoData(realtimecharts[data.Name]);\r\n\t\t} else {\r\n\t\t\tshowChartNoData(realtimecharts[data.Name]);\r\n\t\t}\r\n\r\n\t\thideChartSpinner(realtimecharts[data.Name]);\r\n\r\n\t\tsetTimeout(function () {\r\n\t\t\tresizeRealTimeChart(realtimecharts[data.Name], false);\r\n\t\t}, !supressUpdate ? 350 : 0);\r\n\t}\r\n}","export function createRealTimeScatterChart(data) {\r\n    if (data.ChartName && data.ChartTypeString && data.UID) {\r\n        return c3.generate({\r\n            bindto: '#' + data.UID,\r\n            data: {\r\n                xs: {\r\n                },\r\n                columns: [\r\n                ],\r\n                type: data.ChartTypeString,\r\n                labels: true,\r\n                xSort: false,\r\n                order: null\r\n            },\r\n            interaction: {\r\n                enabled: !data.SuppressUpdate\r\n            },\r\n            point: {\r\n                show: true,\r\n                r: 4\r\n            },\r\n            zoom: {\r\n                enabled: true,\r\n            },\r\n            axis: data.Axis,\r\n            transition: {\r\n                duration: !data.SuppressUpdate ? 250 : 0\r\n            },\r\n            tooltip: {\r\n                show: !data.SuppressUpdate,\r\n                contents: function (d) {\r\n                    var $$ = this;\r\n                    return createRealtimeToolTip(d, $$, data)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function updateRealTimeScatterChart(data) {\r\n    if (data.Name in realtimecharts) {\r\n        var chart = realtimecharts[data.Name].chart;\r\n        var supressUpdate = realtimecharts[data.Name].suppressupdate;\r\n        var columnValues = [];\r\n        var activeKeys = 0;\r\n\r\n        if (typeof data.Colours !== 'undefined' && data.Colours) {\r\n            $.each(data.Colours, function (k, v) {\r\n                if (data.Colours[k]) {\r\n                    realtimecharts[data.Name].colours[k] = \"#\" + data.Colours[k];\r\n                }\r\n            });\r\n        }\r\n\r\n        var columnMap = {};\r\n\r\n        var maxDate = null;\r\n        var minDate = null;\r\n        var isDateXAxis = chart.internal.config.axis_x_type == \"time\" || chart.internal.config.axis_x_type == \"timeseries\";\r\n        //var isDateYAxis = chart.internal.config.axis_y_type == \"time\" || chart.internal.config.axis_y_type == \"timeseries\";\r\n\r\n        $.each(data.XValues, function (k, v) {\r\n            var iteration = 0;\r\n\r\n            var xValues = [];\r\n            var yValues = [];\r\n\r\n            xValues.push(k + \"_x\");\r\n            yValues.push(k);\r\n\r\n            $.each(v, function (xk, xv) {\r\n                if ((xv.indexOf(\"-\") >= 0)) {\r\n                    var dateObj = Date.parse(xv);\r\n                    xValues.push(dateObj);\r\n\r\n                    if (isDateXAxis) {\r\n                        dateObj = moment(dateObj);\r\n\r\n                        if (minDate == null || dateObj < minDate) {\r\n                            minDate = dateObj;\r\n                        }\r\n\r\n                        if (maxDate == null || dateObj > maxDate) {\r\n                            maxDate = dateObj;\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    xValues.push(parseFloat(xv));\r\n                }\r\n\r\n                yValues.push(data.YValues[k][iteration]);\r\n\r\n                iteration++;\r\n            });\r\n\r\n            columnValues.push(xValues);\r\n            columnValues.push(yValues);\r\n\r\n            columnMap[k] = k + \"_x\";\r\n\r\n            realtimecharts[data.Name].labels[k] = data.Labels[k];\r\n        });\r\n\r\n        chart.load({\r\n            xs: columnMap,\r\n            columns: columnValues,\r\n            colors: realtimecharts[data.Name].colours,\r\n            done: function () {\r\n                setChartAsLoaded(data.Name);\r\n            }\r\n        });\r\n\r\n        if (minDate != null && maxDate != null) {\r\n            realtimecharts[data.Name].startdate = minDate;\r\n            realtimecharts[data.Name].enddate = maxDate;\r\n        }\r\n\r\n        if (Object.keys(columnMap).length > 1) {\r\n            chart.legend.show();\r\n        } else {\r\n            chart.legend.hide();\r\n        }\r\n\r\n        $.each(chart.xs(), function (k, v) {\r\n            if (k in data.XValues) {\r\n                activeKeys++;\r\n            } else {\r\n                chart.unload({\r\n                    ids: k\r\n                });\r\n            }\r\n        });\r\n\r\n        if (activeKeys == 0) {\r\n            showChartNoData(realtimecharts[data.Name]);\r\n        } else {\r\n            hideChartNoData(realtimecharts[data.Name]);\r\n        }\r\n\r\n        hideChartSpinner(realtimecharts[data.Name]);\r\n\r\n        setTimeout(function () {\r\n            resizeRealTimeChart(realtimecharts[data.Name], false);\r\n        }, !supressUpdate ? 350 : 0);\r\n    }\r\n}","export function updateRealTimeSummarytableChart(data) {\r\n\tif (data.Name in realtimecharts) {\r\n\t\tvar supressUpdate = realtimecharts[data.Name].suppressupdate;\r\n\t\tvar chartdata = realtimecharts[data.Name];\r\n\t\tvar tabletarget = $(\"#\" + chartdata.uid);\r\n\r\n\t\tif (supressUpdate) {\r\n\t\t\ttabletarget.html(response);\r\n\t\t\thideSummarySpinner(realtimecharts[data.Name]);\r\n\r\n\t\t\tif (data.RawHtml != null) {\r\n\t\t\t\tif (tableTarget.length !== 0) {\r\n\t\t\t\t\ttableTarget.html(data.RawHtml);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tchartdata.chart = $(\"#\" + chartdata.uid + \" > div > .summary-table-group\");\r\n\t\t\tresizeRealTimeChart(chartdata, true);\r\n\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tsetChartAsLoaded(chartdata.uid);\r\n\t\t\t}, 200);\r\n\t\t} else {\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: '/RealTimeChart/FormatSummaryTable/',\r\n\t\t\t\ttype: \"POST\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\ttables: data.SummaryTable,\r\n\t\t\t\t\tfold: realtimecharts[data.Name].tabledefinition.fold,\r\n\t\t\t\t\thighlightFirstRow: realtimecharts[data.Name].tabledefinition.highlightfirstrow\r\n\t\t\t\t},\r\n\t\t\t\tcache: false,\r\n\t\t\t\tcrossDomain: true,\r\n\t\t\t\txhrFields: {\r\n\t\t\t\t\twithCredentials: true\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: function (response) {\r\n\t\t\t\t\thideSummarySpinner(realtimecharts[data.Name]);\r\n\t\t\t\t\ttabletarget.html(response);\r\n\r\n\t\t\t\t\tchartdata.chart = $(\"#\" + chartdata.uid + \" > div > .summary-table-group\");\r\n\t\t\t\t\tresizeRealTimeChart(chartdata, true);\r\n\t\t\t\t\tsetUpSummaryTableDrawer(chartdata);\r\n\r\n\t\t\t\t\tsetChartAsLoaded(chartdata.uid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn;\r\n}"],"names":["globalChartData","addToGlobalCharts","data","uid","clearChartDrawArea","id","container","d3","select","concat","selectAll","remove","drawLegend","type","width","height","margin","labels","colours","legendWidth","left","right","legendMargin","legendItemsArray","legendRowCurrentWidth","legendCurrentRow","forEach","item","i","itemWidth","getStringLengthInPixels","replaceAll","legendItems","append","attr","top","bottom","enter","d","on","e","handleLegendIn","event","handleLegendOut","legendIconSize","style","text","target","__data__","portfolioClass","asset","Colours","string","canvas","document","createElement","context","getContext","font","stringWidth","measureText","snailTooltip","snailColours","c","areaTooltip","areaTooltipLineX","areaTooltipLineY","areaWidth","areaHeight","areaMargin","Name","replace","Object","values","map","value","RawValues","Default","length","showChartNoData","legendData","Labels","assetCount","time","node","getBoundingClientRect","flatMap","subArray","firstValue","slice","assetType","date","Date","toLocaleDateString","percentage","Math","abs","startingPercentage","push","svg","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","nice","area","x","y0","y1","step","datum","xAxis","axisBottom","tickFormat","timeFormat","call","yAxis","axisLeft","format","pointer","tooltipX","tooltipY","pointData","textData","Number","toFixed","html","join","showAreaTooltip","ChartName","ChartTypeString","UID","c3","generate","bindto","xs","columns","xSort","order","interaction","enabled","SuppressUpdate","point","show","r","zoom","axis","donut","expand","transition","duration","tooltip","contents","createRealtimeToolTip","this","Axis","updateRealTimeAreaChart","updateRealTimeSnailChart","snailWidth","snailHeight","snailMargin","snailgroupedLines","currentSubArray","line","benchmarkLine","_toConsumableArray","startX","startY","endX","slope","intercept","extendedY1","extendedX2","max","flat","extendedY2","xPoints","yPoints","min","ticks","lineGenerator","y","portfolioName","index","showSnailTooltip","realtimecharts","chart","supressUpdate","suppressupdate","columnValues","$","each","k","v","displayChart","XValues","xk","xv","isNumeric","parseFloat","load","colors","done","setChartAsLoaded","hideChartNoData","hideChartSpinner","setTimeout","resizeRealTimeChart","activeKeys","columnMap","maxDate","minDate","isDateXAxis","internal","config","axis_x_type","iteration","xValues","yValues","indexOf","dateObj","parse","moment","YValues","startdate","enddate","keys","legend","hide","unload","ids","chartdata","tabletarget","response","hideSummarySpinner","RawHtml","tableTarget","ajax","url","tables","SummaryTable","fold","tabledefinition","highlightFirstRow","highlightfirstrow","cache","crossDomain","xhrFields","withCredentials","success","setUpSummaryTableDrawer"],"mappings":"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"}